package org.elos.fify;

import kong.unirest.HttpResponse;
import kong.unirest.JsonNode;
import kong.unirest.Unirest;
import kong.unirest.json.JSONArray;
import kong.unirest.json.JSONObject;
import org.elos.fify.model.User;
import org.elos.fify.model.Word;
import org.elos.fify.repository.WordRepository;
import org.elos.fify.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.client.okhttp.OkHttpTelegramClient;
import org.telegram.telegrambots.longpolling.interfaces.LongPollingUpdateConsumer;
import org.telegram.telegrambots.longpolling.starter.SpringLongPollingBot;
import org.telegram.telegrambots.longpolling.util.LongPollingSingleThreadUpdateConsumer;
import org.telegram.telegrambots.meta.api.methods.AnswerInlineQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.inlinequery.InlineQuery;
import org.telegram.telegrambots.meta.api.objects.inlinequery.inputmessagecontent.InputTextMessageContent;
import org.telegram.telegrambots.meta.api.objects.inlinequery.result.InlineQueryResultArticle;
import org.telegram.telegrambots.meta.api.objects.message.Message;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.generics.TelegramClient;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;
import java.util.stream.Collectors;

@Component
public class ElosBot implements SpringLongPollingBot, LongPollingSingleThreadUpdateConsumer {
    private final TelegramClient telegramClient;
    private final WordRepository wordRepository;
    private final UserService userService;
    private final Map<Long, TestSession> testSessions = new HashMap<>();
    private final Map<Long, String> tempWords = new HashMap<>();
    private final Map<Long, String> tempTopics = new HashMap<>();
    private static final long ADMIN_ID = 975340794L;
    private static final String API_URL = "https://api.aimlapi.com/v1/chat/completions";
    private static final String API_KEY = "01c7a757bd2d41b68824763f6633976c";

    @Autowired
    public ElosBot(WordRepository wordRepository, UserService userService) {
        this.userService = userService;
        this.telegramClient = new OkHttpTelegramClient(getBotToken());
        this.wordRepository = wordRepository;
    }

    @Override
    public String getBotToken() {
        return "8017845979:AAGVDJgdDtk7ps0U2SiBjNX80hGEDVheFt4";
    }

    @Override
    public LongPollingUpdateConsumer getUpdatesConsumer() {
        return this;
    }



    @Override
    public void consume(Update update) {
        if (update.hasInlineQuery()) {
            handleInlineQuery(update.getInlineQuery());
            return;
        }
        if (update.hasMessage() && update.getMessage().getText() != null) {
            Message message = update.getMessage();
            Long chatId = message.getChatId();
            String messageText = message.getText().trim();

            if (!userService.existsByChatId(chatId)) {
                welcome(chatId, message.getFrom().getUserName());
            } else {
                User user = userService.findByChatId(chatId);
                if (messageText.equalsIgnoreCase("/cancel") || messageText.equalsIgnoreCase("–°–∫–∞—Å—É–≤–∞—Ç–∏")) {
                    testSessions.remove(chatId);
                    user.setPosition(0);
                    userService.save(user);
                    sendMsg(chatId, "‚úñÔ∏è –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
                    return;
                }
                if (testSessions.containsKey(chatId)) {
                    testSessions.get(chatId).processAnswer(messageText);
                    if (testSessions.get(chatId).getCurrentIndex() == 10) {
                        testSessions.remove(chatId);
                    }
                    return;
                }
                // –û—Å—å –¥–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è trySendTranslation
                if (trySendTranslation(chatId, messageText)) {
                    return;
                }

                if (user.getPosition() == 0) {
                    handleCommand(chatId, messageText, user, message.getMessageId());
                } else {
                    handleUserInput(chatId, messageText, user, message.getMessageId());
                }
            }
        }
    }

    private void welcome(Long chatId, String username) {
        userService.add(chatId, username);
        sendMsg(chatId, "<b>üëã –í–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!</b>\n–í–≤–µ–¥—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏.");
    }

    private void handleInlineQuery(InlineQuery inlineQuery) {
        String queryText = inlineQuery.getQuery().trim();
        if (queryText.isEmpty()) return;

        List<Word> words = wordRepository.findByEnglishStartingWithIgnoreCase(queryText);
        List<InlineQueryResultArticle> results = new ArrayList<>();

        for (Word word : words) {
            InputTextMessageContent messageContent = InputTextMessageContent.builder()
                    .messageText(word.getEnglish())
                    .build();

            InlineQueryResultArticle result = InlineQueryResultArticle.builder()
                    .id(UUID.randomUUID().toString())
                    .title(word.getEnglish())
                    .inputMessageContent(messageContent)
                    .build();

            results.add(result);
        }

        AnswerInlineQuery answer = AnswerInlineQuery.builder()
                .inlineQueryId(inlineQuery.getId())
                .results(results)
                .cacheTime(1)
                .build();
        try {
            telegramClient.execute(answer);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean trySendTranslation(Long chatId, String word) {
        Optional<Word> foundWord = wordRepository.findFirstByEnglishIgnoreCaseOrUkrainianIgnoreCase(word, word);
        if (foundWord.isPresent()) {
            Word word1 = foundWord.get();
            String response = word1.getEnglish().equalsIgnoreCase(word)
                    ? "üá∫üá∏ " + word1.getEnglish() + " ‚Üí üá∫üá¶ " + word1.getUkrainian()
                    : "üá∫üá¶ " + word1.getUkrainian() + " ‚Üí üá∫üá∏ " + word1.getEnglish();

            String exampleSentence = askAI("generate a sentence B1 level (10-12 words) with word " + word + ", send only this sentence");
            response += "\nüìñ –ü—Ä–∏–∫–ª–∞–¥: " + exampleSentence;
            sendMsg(chatId, response);
            return true;
        }
        return false;
    }

    private void handleCommand(Long chatId, String text, User user, Integer messageId) {
        switch (text.toLowerCase()) {
            case "/start":
                sendMsg(chatId, "<b>\uD83D\uDFE2 –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ª—ñ–≤ –ø–æ—á–∞–ª–∞—Å—è</b> (—Ç–µ–º–∞: <i>" + user.getPreferredTopic() + "</i>).\n" +
                        "–ê–±–∏ –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É, –Ω–∞–ø–∏—à—ñ—Ç—å:\n/change_topic");
                user.setSendWords(true);
                userService.save(user);
                break;
            case "/change_topic":
                sendMsg(chatId, "üåü –í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É —Å–ª—ñ–≤:");
                showTopics(chatId);
                user.setPosition(1);
                userService.save(user);
                break;
            case "/stop":
                userService.setSendWords(chatId, false);
                sendMsg(chatId, "üõë –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ª—ñ–≤ –∑—É–ø–∏–Ω–µ–Ω–∞.");
                break;
            case "/test_words":
                sendMsg(chatId, "üìù –í–∏–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –¥–ª—è —Ç–µ—Å—Ç—É:");
                showTopics(chatId);
                user.setPosition(2);
                userService.save(user);
                break;
            case "/add_word":
                sendMessageWithCancel(chatId, "üá∫üá∏ –í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é:");
                user.setPosition(3);
                userService.save(user);
                break;
            case "/web":
                if (chatId == ADMIN_ID) {
                    sendReplyMessage(chatId, "<a href=\"https://ielisey.github.io/fifyfront/\"><b>Web Link</b></a>", messageId);
                }
                break;
            case "/ai":
                sendMessageWithCancel(chatId, "‚ÑπÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø–∏—Ç–∞–Ω–Ω—è –¥–ª—è –®–Ü:");
                user.setPosition(5);
                userService.save(user);
                break;
            case "/analytics":
                if (chatId == ADMIN_ID) {
                    showAnalytics(chatId);
                }
                break;
            case "/load_words":
                if (chatId == ADMIN_ID) {
                    loadWordsFromFile(chatId);
                }
                break;
            case "/help":
                sendMsg(chatId, "‚öôÔ∏è <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n" +
                        "/start - –ø–æ—á–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Å–ª—ñ–≤\n" +
                        "/stop - –∑—É–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫—É\n" +
                        "/change_topic - –∑–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É —Å–ª—ñ–≤\n"+
                        "/test_words - –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç\n" +
                        "/add_word - –¥–æ–¥–∞—Ç–∏ —Å–ª–æ–≤–æ\n" +
                        "/web - –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–∞–¥–º—ñ–Ω)\n" +
                        "/ai - –∑–∞–ø–∏—Ç–∞—Ç–∏ –®–Ü\n" +
                        "/analytics - –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ (–∞–¥–º—ñ–Ω)\n" +
                        "/load_words - –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ª–æ–≤–∞ (–∞–¥–º—ñ–Ω)");
                break;
            default:
                sendMsg(chatId, "‚ùì –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.");
        }
    }


    private void handleUserInput(Long chatId, String text, User user, Integer messageId) {
        if (user.getPosition() == 1) { // –í–∏–±—ñ—Ä —Ç–µ–º–∏ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            List<String> availableTopics = wordRepository.findAllTopics();
            if (availableTopics.contains(text)) {
                userService.setPreferredTopic(chatId, text);
                userService.setSendWords(chatId, true);
                sendMsg(chatId, "‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–ª—ñ–≤ –ø–æ—á–∞–ª–∞—Å—è (—Ç–µ–º–∞: " + text + ").");
            } else {
                sendMsg(chatId, "‚ùå –¢–µ–º–∏ '" + text + "' –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É:\n" + String.join("\n", availableTopics));
                return; // –ó–∞–ª–∏—à–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ –≤–∏–±–æ—Ä—É —Ç–µ–º–∏
            }
            user.setPosition(0);
        } else if (user.getPosition() == 2) { // –í–∏–±—ñ—Ä —Ç–µ–º–∏ –¥–ª—è —Ç–µ—Å—Ç—É
            startTest(chatId, text);
            user.setPosition(0);
            userService.save(user);
        } else if (user.getPosition() == 3) { // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞ (–∞–Ω–≥–ª)
            tempWords.put(chatId, text);
            sendMessageWithCancel(chatId, "üá∫üá¶ –í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä–µ–∫–ª–∞–¥ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é:");
            user.setPosition(4);
            userService.save(user);
        } else if (user.getPosition() == 4) { // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Å–ª–æ–≤–∞ (—É–∫—Ä)
            String english = tempWords.remove(chatId);
            wordRepository.save(new Word(english, text, "other"));
            sendMsg(chatId, "‚úÖ –°–ª–æ–≤–æ <i>" + english + "</i> –¥–æ–¥–∞–Ω–æ!");
            user.setPosition(0);
            userService.save(user);
        } else if (user.getPosition() == 5) { // –ó–∞–ø–∏—Ç –¥–æ –®–Ü
            String answer = askAI(text);
            sendReplyMessage(chatId, answer, messageId);
            user.setPosition(0);
            userService.save(user);
        }
    }

    private void showAnalytics(Long chatId) {
        long wordCount = wordRepository.count();
        sendMsg(chatId, "<b>üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞:</b>\n–°–ª—ñ–≤ —É –±–∞–∑—ñ: " + wordCount);
    }

    private void loadWordsFromFile(Long chatId) {
        int updatedCount = 0;
        int addedCount = 0;

        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(Objects.requireNonNull(getClass().getClassLoader().getResourceAsStream("words.txt"))))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("=");
                if (parts.length >= 2) {
                    String english = parts[0].trim();
                    String ukrainian = parts[1].trim();
                    String topic = (parts.length > 2) ? parts[2].trim() : "other"; // –Ø–∫—â–æ —Ç–µ–º–∞ –≤—ñ–¥—Å—É—Ç–Ω—è, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ "other"

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Å–ª–æ–≤–æ –≤–∂–µ —î –≤ –±–∞–∑—ñ
                    Optional<Word> existingWord = wordRepository.findByEnglish(english);

                    if (existingWord.isPresent()) {
                        Word word = existingWord.get();
                        if (!Objects.equals(word.getTopic(), topic) || word.getTopic() == null) { // –û–Ω–æ–≤–ª—é—î–º–æ –ª–∏—à–µ —è–∫—â–æ —Ç–µ–º–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—è
                            word.setTopic(topic);
                            wordRepository.save(word);
                            updatedCount++;
                        }
                    } else {
                        wordRepository.save(new Word(english, ukrainian, topic));
                        addedCount++;
                    }
                }
            }

            sendMsg(chatId, "<b>–û–Ω–æ–≤–ª–µ–Ω–æ —Å–ª—ñ–≤: </b>" + updatedCount +
                    "\n<b>–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏—Ö —Å–ª—ñ–≤: </b>" + addedCount +
                    "\n–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤: " + wordRepository.count());
        } catch (Exception e) {
            System.err.println("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª—ñ–≤: " + e.getMessage());
        }
    }

    private String askAI(String userMessage) {
        try {
            JSONObject requestBody = new JSONObject()
                    .put("model", "gpt-4o")
                    .put("messages", new JSONArray()
                            .put(new JSONObject().put("role", "system")
                                    .put("content", "You are an AI assistant who knows everything."))
                            .put(new JSONObject().put("role", "user")
                                    .put("content", userMessage)))
                    .put("max_tokens", 100);

            HttpResponse<JsonNode> response = Unirest.post(API_URL)
                    .header("Authorization", "Bearer " + API_KEY)
                    .header("Content-Type", "application/json")
                    .body(requestBody)
                    .asJson();

            return response.getBody().getObject()
                    .getJSONArray("choices")
                    .getJSONObject(0)
                    .getJSONObject("message")
                    .getString("content")
                    .trim();
        } catch (Exception e) {
            return "Error: " + e.getMessage();
        }
    }

    private void showTopics(Long chatId) {
        List<String> topics = wordRepository.findAllTopics();
        StringBuilder sb = new StringBuilder("–î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–º–∏:\n");
        topics.forEach(topic -> sb.append("- ").append(topic).append("\n"));
        sendMsg(chatId, sb.toString());
    }

    @Scheduled(fixedRate = 10000)
    private void sendRandomWords() {
        List<User> activeUsers = userService.findAll().stream()
                .filter(User::isSendWords)
                .toList();

        if (activeUsers.isEmpty()) return;

        for (User user : activeUsers) {
            List<Word> words = new ArrayList<>();
            String preferredTopic = user.getPreferredTopic();
            List<Word> topicWords = wordRepository.findRandomWordsByTopic(preferredTopic, 9);
            if (topicWords.isEmpty()) {
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫—â–æ –≤ –æ–±—Ä–∞–Ω—ñ–π —Ç–µ–º—ñ –Ω–µ–º–∞—î —Å–ª—ñ–≤
            }
            words.addAll(topicWords); // 90%
            words.addAll(wordRepository.findRandomWordsExcludingTopic(preferredTopic, 1)); // 10%
            if (!words.isEmpty()) {
                Collections.shuffle(words);
                Word word = words.get(0);
                sendMsg(user.getChatId(), "‚ú® <i>" + word.getEnglish() + "</i> - <i>" + word.getUkrainian() + "</i>");
            }
        }
    }

    private void startTest(Long chatId, String topic) {
        List<Word> words = wordRepository.findRandomWordsByTopic(topic, 10);
        if (words.isEmpty()) {
            sendMsg(chatId, "‚ö†Ô∏è –ù–µ–º–∞—î —Å–ª—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É –∑–∞ —Ç–µ–º–æ—é " + topic);
            return;
        }
        testSessions.put(chatId, new TestSession(chatId, words, telegramClient));
        testSessions.get(chatId).askNextWord();
    }

    private void sendMsg(Long chatId, String text) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .parseMode("HTML")
                .build();
        try {
            telegramClient.execute(sendMessage);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private void sendMessageWithCancel(Long chatId, String text) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .parseMode("HTML")
                .replyMarkup(ReplyKeyboardMarkup.builder()
                        .keyboardRow(new KeyboardRow(KeyboardButton.builder().text("–°–∫–∞—Å—É–≤–∞—Ç–∏").build()))
                        .resizeKeyboard(true)
                        .oneTimeKeyboard(true)
                        .build())
                .build();
        try {
            telegramClient.execute(sendMessage);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }

    private void sendReplyMessage(Long chatId, String text, Integer messageId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .replyToMessageId(messageId)
                .parseMode("HTML")
                .build();
        try {
            telegramClient.execute(sendMessage);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}